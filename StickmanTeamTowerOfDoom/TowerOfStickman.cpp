#include "pch.h"
#include "TowerOfStickman.h"
#include "ProjectileManager.h"

#include "Boss.h"

#pragma region Sprites
unsigned char TileLabelTLE0[] =
{
  0x3C,0x3C,0x42,0x7E,0x81,0xFF,0xA5,0xFF,
  0xA5,0xFF,0x81,0xFF,0x42,0x7E,0x3C,0x3C
};
unsigned char TileLabelTLE1[] =
{
  0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0xFC,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
unsigned char TileLabelTLE2[] =
{
  0x00,0x00,0x00,0x00,0x01,0x01,0x02,0x02,
  0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02
};
unsigned char TileLabelTLE3[] =
{
  0x08,0x08,0x08,0x08,0x08,0x08,0xF8,0xF8,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
unsigned char TileLabelTLE4[] =
{
  0x24,0x24,0x24,0x24,0x20,0x20,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
unsigned char TileLabelTLE5[] =
{
  0x24,0x24,0x24,0x24,0x04,0x04,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
unsigned char TileLabelTLE6[] =
{
  0x24,0x24,0x24,0x24,0x24,0x24,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
unsigned char TileLabelTLE7[] =
{
  0x1C,0x1C,0x22,0x3E,0xEA,0xFE,0x2A,0x3E,
  0x3C,0x3C,0x00,0x00,0x00,0x00,0x00,0x00
};
unsigned char TileLabelTLE8[] =
{
  0x78,0x78,0x04,0x7C,0xF2,0xFE,0x02,0x06,
  0x02,0x06,0x02,0x06,0x00,0x00,0x00,0x00
};
unsigned char TileLabelTLE9[] =
{
  0x00,0x00,0x78,0x78,0x04,0x7C,0x02,0x0E,
  0x02,0x06,0x02,0x06,0x02,0x06,0x00,0x00
};
unsigned char TileLabelTLE10[] =
{
  0x3C,0x3C,0x42,0x7E,0xA5,0xFF,0xBD,0xDB,
  0x81,0xFF,0xDB,0xFF,0x42,0x7E,0x3C,0x3C
};
unsigned char TileLabelTLE11[] =
{
  0x00,0x00,0xFC,0xFC,0x82,0xFE,0x81,0xFF,
  0x81,0xFF,0x82,0xFE,0xFC,0xFC,0x00,0x00
};
unsigned char TileLabelTLE12[] =
{
  0x00,0x00,0x00,0xFF,0x00,0xFF,0x00,0xFF,
  0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00
};
unsigned char TileLabelTLE13[] =
{
  0x66,0x66,0x99,0xFF,0x81,0xFF,0x81,0xFF,
  0x81,0xFF,0x42,0x7E,0x24,0x3C,0x18,0x18
};
unsigned char TileLabelTLE14[] =
{
  0x66,0x66,0x99,0xF9,0x81,0xF1,0x81,0xF1,
  0x81,0xF1,0x42,0x72,0x24,0x34,0x18,0x18
};
unsigned char TileLabelTLE15[] =
{
  0x00,0x00,0x3C,0x3C,0x18,0x18,0x24,0x3C,
  0x5A,0x66,0x52,0x6E,0x24,0x3C,0x18,0x18
};
unsigned char TileLabelTLE16[] =
{
  0x00,0x00,0x30,0x30,0x10,0x10,0x20,0x30,
  0x40,0x70,0x40,0x70,0x20,0x30,0x10,0x10
};
unsigned char TileLabelTLE17[] =
{
  0x0F,0x0F,0x30,0x3F,0x40,0x7F,0x58,0x7F,
  0x86,0xFF,0x80,0xFF,0x86,0xFF,0xA6,0xFF
};
unsigned char TileLabelTLE18[] =
{
  0xA0,0xFF,0xA3,0xFF,0x86,0xFF,0x84,0xFF,
  0x44,0x7F,0x40,0x7F,0x30,0x3F,0x0F,0x0F
};
unsigned char TileLabelTLE19[] =
{
  0x00,0x00,0x3C,0x3C,0x42,0x7E,0xDA,0xFE,
  0xDA,0xFE,0x42,0x7E,0x3C,0x3C,0x00,0x00
};
unsigned char TileLabelTLE20[] =
{
  0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x0C,
  0x3A,0x3E,0x52,0x7E,0xA5,0xFF,0xC9,0xFF
};
unsigned char TileLabelTLE21[] =
{
  0x93,0xFF,0xA5,0xFD,0x4A,0x7E,0x32,0x3E,
  0x0C,0x0C,0x00,0x00,0x00,0x00,0x00,0x00
};
unsigned char TileLabelTLE22[] =
{
  0x09,0x0F,0x09,0x0F,0x09,0x0F,0x0F,0x0F,
  0x0F,0x00,0x0A,0x00,0x00,0x00,0x00,0x00
};
unsigned char TileLabelTLE23[] =
{
  0x3C,0x3C,0x42,0x7E,0x81,0xFF,0xFF,0xFF,
  0x99,0xFF,0x99,0xFF,0x5A,0x7E,0x3C,0x3C
};
unsigned char TileLabelTLE24[] =
{
  0x60,0x60,0x90,0xF0,0x90,0xF0,0x90,0xF0,
  0x90,0xF0,0x90,0xF0,0x90,0xF0,0x60,0x60
};
#pragma endregion

TowerOfStickman::TowerOfStickman()
	:Level()
	,m_ElapsedSec{0}
	,m_ProjectileManager{}
{
	for (int i{}; i < 40; ++i)
	{
		m_OAM[i] = OAMEntry(10, 0, 0);
	}
#pragma region Regret
	int amountOfSprites{17};
	for (int j{ 0 }; j < amountOfSprites; ++j)
	{
		m_Sprites[0][j] = TileLabelTLE0[j];
	}
	for (int j{ 0 }; j < amountOfSprites; ++j)
	{
		m_Sprites[1][j] = TileLabelTLE1[j];
	}
	for (int j{ 0 }; j < amountOfSprites; ++j)
	{
		m_Sprites[2][j] = TileLabelTLE2[j];
	}
	for (int j{ 0 }; j < amountOfSprites; ++j)
	{
		m_Sprites[3][j] = TileLabelTLE3[j];
	}
	for (int j{ 0 }; j < amountOfSprites; ++j)
	{
		m_Sprites[4][j] = TileLabelTLE4[j];
	}
	for (int j{ 0 }; j < amountOfSprites; ++j)
	{
		m_Sprites[5][j] = TileLabelTLE5[j];
	}
	for (int j{ 0 }; j < amountOfSprites; ++j)
	{
		m_Sprites[6][j] = TileLabelTLE6[j];
	}
	for (int j{ 0 }; j < amountOfSprites; ++j)
	{
		m_Sprites[7][j] = TileLabelTLE7[j];
	}
	for (int j{ 0 }; j < amountOfSprites; ++j)
	{
		m_Sprites[8][j] = TileLabelTLE8[j];
	}
	for (int j{ 0 }; j < amountOfSprites; ++j)
	{
		m_Sprites[9][j] = TileLabelTLE9[j];
	}
	for (int j{ 0 }; j < amountOfSprites; ++j)
	{
		m_Sprites[10][j] = TileLabelTLE10[j];
	}
	for (int j{ 0 }; j < amountOfSprites; ++j)
	{
		m_Sprites[11][j] = TileLabelTLE11[j];
	}
	for (int j{ 0 }; j < amountOfSprites; ++j)
	{
		m_Sprites[12][j] = TileLabelTLE12[j];
	}
	for (int j{ 0 }; j < amountOfSprites; ++j)
	{
		m_Sprites[13][j] = TileLabelTLE13[j];
	}
	for (int j{ 0 }; j < amountOfSprites; ++j)
	{
		m_Sprites[14][j] = TileLabelTLE14[j];
	}
	for (int j{ 0 }; j < amountOfSprites; ++j)
	{
		m_Sprites[15][j] = TileLabelTLE15[j];
	}
	for (int j{ 0 }; j < amountOfSprites; ++j)
	{
		m_Sprites[16][j] = TileLabelTLE16[j];
	}
	for (int j{ 0 }; j < amountOfSprites; ++j)
	{
		m_Sprites[17][j] = TileLabelTLE17[j];
	}
	for (int j{ 0 }; j < amountOfSprites; ++j)
	{
		m_Sprites[18][j] = TileLabelTLE18[j];
	}
	for (int j{ 0 }; j < amountOfSprites; ++j)
	{
		m_Sprites[19][j] = TileLabelTLE19[j];
	}
	for (int j{ 0 }; j < amountOfSprites; ++j)
	{
		m_Sprites[20][j] = TileLabelTLE20[j];
	}
	for (int j{ 0 }; j < amountOfSprites; ++j)
	{
		m_Sprites[21][j] = TileLabelTLE21[j];
	}
	for (int j{ 0 }; j < amountOfSprites; ++j)
	{
		m_Sprites[22][j] = TileLabelTLE22[j];
	}
	for (int j{ 0 }; j < amountOfSprites; ++j)
	{
		m_Sprites[23][j] = TileLabelTLE23[j];
	}
	for (int j{ 0 }; j < amountOfSprites; ++j)
	{
		m_Sprites[24][j] = TileLabelTLE24[j];
	}
#pragma endregion

	unsigned char values[]{ 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00 };
	for (int i{}; i < 256; ++i)
	{
		for (int j{}; j < 16; ++j)
		{
			m_BackGround[i][j] = values[j];
		}

	}
	for (int i{}; i < 1024; ++i)
	{
		m_Grid[i] = m_BackGround[0][0];
	}
}

TowerOfStickman::~TowerOfStickman()
{
}

void TowerOfStickman::Draw() const
{
	Level::Render(m_Sprites,m_BackGround,m_OAM,m_Grid,0,0);
}

void TowerOfStickman::Update(float elapsedSec)
{
	
}

bool TowerOfStickman::HasReachedEnd()
{
	// IsBossFinished
	return false;
}
